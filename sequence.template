// FILE: sequence.template
// TEMPLATE CLASS IMPLEMENTED: sequence<Item> (see sequence.h for documentation).

#include <cassert>

namespace sequenceOfNum
{
template <class Item>
sequence<Item>::sequence() : used(0), current_index(0) { }

template <class Item>
void sequence<Item>::start()
{
    current_index = 0;
}

template <class Item>
void sequence<Item>::end()
{
    current_index = (used > 0) ? used - 1 : 0;
}

template <class Item>
void sequence<Item>::advance()
{
    assert( is_item() );
    ++current_index;
}

template <class Item>
void sequence<Item>::move_back()
{
    assert( is_item() );
    if (current_index == 0)
        current_index = used;
    else
        --current_index;
}

template <class Item>
void sequence<Item>::add(const value_type& entry)
{
    assert( size() < CAPACITY );

    size_type i;

    if ( ! is_item() )
    {
        if (used > 0)
            for (i = used; i >= 1; --i)
                data[i] = data[i - 1];
        data[0] = entry;
        current_index = 0;
    }
    else
    {
        ++current_index;
        for (i = used; i > current_index; --i)
            data[i] = data[i - 1];
        data[current_index] = entry;
    }
    ++used;
}

template <class Item>
void sequence<Item>::remove_current()
{
    assert( is_item() );

    size_type i;

    for (i = current_index + 1; i < used; ++i)
        data[i - 1] = data[i];
    --used;
}

template <class Item>
typename sequence<Item>::size_type sequence<Item>::size() const
{
    return used;
}

template <class Item>
bool sequence<Item>::is_item() const
{
    return (current_index < used);
}

template <class Item>
typename sequence<Item>::value_type sequence<Item>::current() const
{
    assert( is_item() );
    return data[current_index];
}
}
